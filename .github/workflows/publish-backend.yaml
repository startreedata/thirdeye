name: Publish ThirdEye Backend

on:
  push:
    branches: [ master ]
    paths-ignore:
      - thirdeye-ui/**
  # for debugging purpose
  workflow_dispatch:

jobs:
  publish-thirdeye:
    runs-on: ubuntu-latest
    environment: github-production
    timeout-minutes: 20
    steps:
      - name: Pull repository
        uses: actions/checkout@v3
      - name: Install JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Cache - restore local Maven repository
        id: cache-restore
        uses: actions/cache/restore@v3
        with:
          path: ~/.m2/repository
          key: publish-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: publish-${{ runner.os }}-maven-
      - name: Determine release type (release or snapshot)
        id: release-type
        run: |
          RELEASE_VERSION=$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "$GITHUB_OUTPUT"
          MVN_REPOSITORY_ID=$( [[ ${RELEASE_VERSION} == *SNAPSHOT ]] && echo ${MVN_REPOSITORY_ID_SNAPSHOTS} || echo ${MVN_REPOSITORY_ID_RELEASES} )
          echo "MVN_REPOSITORY_ID=${MVN_REPOSITORY_ID}" >> "$GITHUB_OUTPUT"
        env:
          MVN_REPOSITORY_ID_SNAPSHOTS: startree-snapshots
          MVN_REPOSITORY_ID_RELEASES: startree-releases
      - name: Set maven repository settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: '[{"id": "${{ steps.release-type.outputs.MVN_REPOSITORY_ID }}", "username": "${{ env.MVN_REPOSITORY_USERNAME }}", "password": "${{ env.MVN_REPOSITORY_PASSWORD }}"}]'
        env:
          MVN_REPOSITORY_USERNAME: ${{ secrets.MVN_ARTIFACTORY_USERNAME }}
          MVN_REPOSITORY_PASSWORD: ${{ secrets.MVN_ARTIFACTORY_TOKEN }}
      - name: Publish backend artefacts
        run: |
          ./mvnw -Prelease -DskipTests -DreleaseVersion=${RELEASE_VERSION} deploy -U \
            -DaltDeploymentRepository=${MVN_REPOSITORY_ID}::default::${MVN_REPOSITORY_URL}/${MVN_REPOSITORY_ID}
        env:
          RELEASE_VERSION: ${{ steps.release-type.outputs.RELEASE_VERSION }}
          MVN_REPOSITORY_ID: ${{ steps.release-type.outputs.MVN_REPOSITORY_ID }}
          MVN_REPOSITORY_URL: ${{ secrets.MVN_ARTIFACTORY_URL }}
      - name: Clean Maven settings before caching maven folder
        # run with the same condition as the caching step below
        if: steps.cache-restore.outputs.cache-hit != 'true' && ( failure() || success())
        run: rm ~/.m2/settings.xml
      - name: Cache - save local Maven repository
        uses: actions/cache/save@v3
        # save to cache only if necessary - cache even if failed (useful if some steps are flaky)
        if: steps.cache-restore.outputs.cache-hit != 'true' && ( failure() || success())
        with:
          path: ~/.m2/repository
          key: publish-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      # build and publish docker image
      - name: Login in Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DKR_EXTERNAL_REGISTRY }}
          username: ${{ secrets.MVN_ARTIFACTORY_USERNAME }}
          password: ${{ secrets.MVN_ARTIFACTORY_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          # force using the current state of the folder - TE is already built and available in thirdeye-distribution/target
          # see https://github.com/docker/build-push-action#git-context
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/thirdeye:${{ steps.release-type.outputs.RELEASE_VERSION }}
            ${{ env.REGISTRY }}/thirdeye:latest
        env:
          REGISTRY: ${{ secrets.DKR_EXTERNAL_REGISTRY }}


