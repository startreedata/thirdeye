name: Publish ThirdEye Backend

on:
  push:
    branches: [ master ]
    paths-ignore:
      - kubernetes
      - thirdeye-ui/**
  # for debugging purpose
  workflow_dispatch:

jobs:
  publish-thirdeye:
    runs-on: ubuntu-latest
    environment: github-production
    timeout-minutes: 20
    steps:
      - name: Pull repository
        uses: actions/checkout@v4
      - name: Install JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache - restore local Maven repository
        id: cache-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.m2/repository
            ~/.m2/wrapper
          key: publish-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: publish-${{ runner.os }}-maven-
      - name: Get release version number
        id: release-version
        run: |
          RELEASE_VERSION=$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> "$GITHUB_OUTPUT"
      - name: Set maven repository settings
        uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: >
            [
              {
                "id": "startree-snapshots", 
                "username": "${{ env.MVN_REPOSITORY_USERNAME }}", 
                "password": "${{ env.MVN_REPOSITORY_PASSWORD }}"
              },
              {
                "id": "startree-releases", 
                "username": "${{ env.MVN_REPOSITORY_USERNAME }}", 
                "password": "${{ env.MVN_REPOSITORY_PASSWORD }}"
              }
            ]
        env:
          MVN_REPOSITORY_USERNAME: ${{ secrets.MVN_ARTIFACTORY_USERNAME }}
          MVN_REPOSITORY_PASSWORD: ${{ secrets.MVN_ARTIFACTORY_TOKEN }}
      - name: Publish backend artefacts
        run: |
          ./mvnw -B -Prelease -DskipTests deploy -U

      # build and publish docker image
      - name: Login in Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DKR_EXTERNAL_REGISTRY }}
          username: ${{ secrets.MVN_ARTIFACTORY_USERNAME }}
          password: ${{ secrets.MVN_ARTIFACTORY_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          # force using the current state of the folder - TE is already built and available in thirdeye-distribution/target
          # see https://github.com/docker/build-push-action#git-context
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/thirdeye:${{ steps.release-version.outputs.RELEASE_VERSION }}
            ${{ env.REGISTRY }}/thirdeye:latest
        env:
          REGISTRY: ${{ secrets.DKR_EXTERNAL_REGISTRY }}

      # if a release is cut - notify the enterprise ThirdEye repo
      - name: Notify enterprise thirdEye repo
        if: steps.release-version.outputs.RELEASE_VERSION != '' && !contains(steps.release-version.outputs.RELEASE_VERSION, 'SNAPSHOT')
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: startreedata/startree-thirdeye
          event-type: community-te-release
          client-payload: '{"community_version": "${{ steps.release-version.outputs.RELEASE_VERSION }}"}'
      
      # caching after all other steps are done because this can take time, except the slack success notification because we want to know if the caching failed    
      - name: Cache - save local Maven repository
        uses: actions/cache/save@v3
        # save to cache only if necessary - cache even if failed (useful if some steps are flaky)
        if: steps.cache-restore.outputs.cache-hit != 'true' && ( failure() || success())
        with:
          path: |
            ~/.m2/repository
            ~/.m2/wrapper
          key: publish-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Slack - Notify Success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "ThirdEye backend publish succeeded. Version: ${{ steps.release-version.outputs.RELEASE_VERSION }}"
          SLACK_TITLE: SUCCESS
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      - name: Slack - Notify Failure
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "@here - ThirdEye backend publish failed."
          SLACK_TITLE: FAILURE
          SLACK_LINK_NAMES: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            # Run Scan and JIRA Automation
      - name: Run Scan and JIRA Automation
        uses: startreedata/securitypipeline/scan-and-jira-action@main  # Update the repo path as needed
        with:
          docker_tag: ${{ env.REGISTRY }}/thirdeye:${{ steps.release-version.outputs.RELEASE_VERSION }}       # Replace with Docker image tag (e.g., repo.startreedata.io/image:tag)
          project_name: "thirdeye"            # Replace with your project name (must match entry in assignee.yml)
        env:
          GH_TOKEN: ${{ secrets.GHH_TOKEN }}  # This is the GitHub token secret for authenticat
