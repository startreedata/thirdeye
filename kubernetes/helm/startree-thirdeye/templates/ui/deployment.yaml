#
# Copyright 2024 StarTree Inc
#
# Licensed under the StarTree Community License (the "License"); you may not use
# this file except in compliance with the License. You may obtain a copy of the
# License at http://www.startree.ai/legal/startree-community-license
#
# Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT * WARRANTIES OF ANY KIND,
# either express or implied.
# See the License for the specific language governing permissions and limitations under
# the License.
#


apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "thirdeye.ui.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "thirdeye.name" . }}
    chart: {{ include "thirdeye.chart" . }}
    component: {{ .Values.ui.name }}
    release: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ include "thirdeye.name" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.ui.name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ include "thirdeye.name" . }}
        release: {{ .Release.Name }}
        component: {{ .Values.ui.name }}
      annotations:
{{ toYaml .Values.ui.podAnnotations | indent 8 }}
    spec:
      {{- if .Values.ui.image.pullSecretsName }}
      imagePullSecrets:
        - name: "{{ .Values.ui.image.pullSecretsName }}"
      {{- end }}
      nodeSelector:
{{ toYaml .Values.ui.nodeSelector | indent 8 }}
      affinity:
{{ toYaml .Values.ui.affinity | indent 8 }}
      tolerations:
{{ toYaml .Values.ui.tolerations | indent 8 }}
      initContainers:
      - name: init-config
        image: alpine:3.18
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
        env:
        - name: NGINX_ENVSUBST_TEMPLATE_DIR
          value: /home/thirdeye/nginx/templates
        - name: NGINX_CONF
          value: |
            server {
              listen  ${NGINX_PORT};
              {{- if .Values.tls.enabled }}
              ssl_certificate /home/thirdeye/tls/tls.crt;
              ssl_certificate_key /home/thirdeye/tls/tls.key;
              ssl_password_file /home/thirdeye/tls-pass/pass;
              {{- end }}
              set $backend_servers ${THIRDEYE_API_BASE_URL};
              resolver {{ .Values.ui.resolver }} valid=30s;
              location ~/api(.*) {
                if ($args != "") {
                  proxy_pass $backend_servers/api$1?$args;
                }
                if ($args = "") {
                  proxy_pass $backend_servers/api$1;
                }
                proxy_ssl_server_name on;
                proxy_redirect off;
                proxy_set_header Host $proxy_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Host $server_name;
                proxy_read_timeout 300;
              }
              location ~/swagger(.*) {
                proxy_pass $backend_servers/swagger$1;
                proxy_ssl_server_name on;
                proxy_redirect off;
                proxy_set_header Host $proxy_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Host $server_name;
                proxy_read_timeout 300;
              }
              location ~/openapi(.*) {
                proxy_pass $backend_servers/openapi$1;
                proxy_ssl_server_name on;
                proxy_redirect off;
                proxy_set_header Host $proxy_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Host $server_name;
                proxy_read_timeout 300;
              }
              location / {
                try_files $uri $uri/ /index.html;
              }
              location ~ /index.html {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
              }
              location = /robots.txt {
                add_header Content-Type text/plain;
                return 200 "User-agent: *\nDisallow: /\n";
              }
            }
        command:
        - /bin/sh
        - -c
        - >
          {{- if .Values.tls.enabled }}
          echo {{ .Values.tls.password }} > /home/thirdeye/tls-pass/pass &&
          {{- end }}
          echo $NGINX_CONF > $NGINX_ENVSUBST_TEMPLATE_DIR/default.conf.template
        volumeMounts:
        - name: nginx-conf
          mountPath: /home/thirdeye/nginx/templates
        {{- if .Values.tls.enabled }}
        - name: tls-pass
          mountPath: /home/thirdeye/tls-pass
        {{- end }}
      containers:
      - name: ui
        image: "{{ .Values.ui.image.repository }}:{{ .Values.ui.image.tag }}"
        imagePullPolicy: {{ .Values.ui.image.pullPolicy }}
        args: []
        ports:
          - containerPort: {{ .Values.ui.port }}
            protocol: TCP
        env:
          - name: NGINX_PORT
            value: "{{ .Values.ui.port }} {{- if .Values.tls.enabled }} ssl {{- end }}"
          - name: THIRDEYE_API_BASE_URL
            value: "{{ if .Values.tls.enabled -}} https {{- else -}} http {{- end }}://{{ template "thirdeye.coordinator.headless" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ if .Values.tls.enabled -}} {{ .Values.tls.port }} {{- else -}} {{ .Values.coordinator.port }} {{- end }}"
          - name: NGINX_ENVSUBST_TEMPLATE_DIR
            value: /home/thirdeye/nginx/templates
          - name: NGINX_ENVSUBST_OUTPUT_DIR
            value: /home/thirdeye/nginx/conf.d
        volumeMounts:
          {{- if .Values.tls.enabled }}
          - name: tls
            mountPath: /home/thirdeye/tls
            readOnly: true
          - name: tls-pass
            mountPath: /home/thirdeye/tls-pass
            readOnly: true
          {{- end }}
          - name: nginx-conf
            mountPath: /home/thirdeye/nginx/templates
      volumes:
        - name: nginx-conf
          emptyDir: {}
        {{- if .Values.tls.enabled }}
        - name: tls
          secret:
            secretName: {{ .Values.tls.cert.internal.secretName | default (printf "%s-tls" (include "thirdeye.ui.fullname" .)) }}
        - name: tls-pass
          emptyDir: {}
        {{- end }}
      restartPolicy: Always
