
apiVersion: v1
kind: ConfigMap
metadata:
  name: thirdeye-worker
data:
  server.yaml: |
    ######################################################
    # ThirdEye Worker helm config
    ######################################################

    server:
      type: default
      applicationContextPath: /
      adminContextPath: /admin

      applicationConnectors:
        {{- if .Values.worker.tls.enabled }}
        - type: https
          port: 443
          idleTimeout: 620s
          keyStorePath: /opt/thirdeye/server/keystore/keystore
          keyStorePassword: {{ .Values.tls.password }}
          keyStoreType: {{ .Values.tls.type }}
        {{- end }}
        - type: http
          port: {{ .Values.worker.port }}
          idleTimeout: 620s

    logging:
      level: INFO
      loggers:
        ai.startree.thirdeye: DEBUG
        org.apache.zookeeper: WARN

    auth:
      enabled: false
    #  oauth:
    #    keysUrl: <keys url>
    #    required:
    #      - sub
    #      - exp
    #    exactMatch:
    #      iss: <issuer url>
    #    cache:
    #      size: 64
    #      ttl: 60000

    database:
      # Assuming a local MySQL server running on the default port 3306
      url: jdbc:mysql://{{ .Release.Name }}-mysql/thirdeye?autoReconnect=true&useSSL=false
      user: {{ .Values.mysql.mysqlUser }}
      password: {{ .Values.mysql.mysqlPassword }}
      driver: com.mysql.cj.jdbc.Driver

    swagger:
      # Enable/Disable the swagger resource. Helps in API documentation. Should be true by default
      enabled: true

      # package to scan for jersey resources
      resourcePackage: ai.startree.thirdeye.resources

    # Start the Task Driver. This module runs the detection and notification tasks
    taskDriver:
      enabled: true
      id: 0 # must be a non-negative integer unique per instance/worker

    ui:
      externalUrl: {{ .Values.ui.publicUrl }}

    # Prometheus compatible metrics will be exposed at /admin/prometheus
    prometheus:
      enabled: {{ .Values.worker.prometheus.enabled }}

    notifications:
      smtp:
        host: ${SMTP_HOST}
        port: ${SMTP_PORT}
        user: ${SMTP_USER}
        password: ${SMTP_PASSWORD}
    #  jira:
    #    user: <REPLACE_ME>
    #    password: <REPLACE_ME>
    #    url: <REPLACE_ME>
    #    defaultProject: <REPLACE_ME>
    #    issueTypeId: 19
    failureFromAddress: "thirdeye@localhost"
    failureToAddress: "thirdeye@localhost"
    phantomJsPath: "/usr/local/bin/jstf"

    scheduler:
      enabled: false

    rca:
      frameworks:
        identity:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.NullPipeline

        metricRelated:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.MetricMappingPipeline

        metricAnalysis:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.MetricAnalysisPipeline

        metricBreakdown:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.MetricBreakdownPipeline

        metricComponentAnalysis:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.MetricComponentAnalysisPipeline
            properties:
              excludeDimensions: [ "environment", "continent" ]
              parallelism: 5
              k: 5

        eventExperiment:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.ThirdEyeEventsPipeline
            properties:
              strategy: COMPOUND
              k: 500
              eventType: LIX

        eventHoliday:
          - outputName: METRIC_RELATED
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.MetricAnalysisPipeline

          - outputName: OUTPUT
            inputNames: [ INPUT, METRIC_RELATED ]
            className: ai.startree.thirdeye.rootcause.impl.ThirdEyeEventsPipeline
            properties:
              strategy: COMPOUND
              k: 500
              eventType: HOLIDAY

        eventCustom:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.ThirdEyeEventsPipeline
            properties:
              strategy: COMPOUND
              k: 500
              eventType: CUSTOM

        eventAnomaly:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.AnomalyEventsPipeline
            properties:
              strategyClass: ai.startree.thirdeye.rootcause.impl.AnomalyEventsPipeline$TimeRangeScoreStrategy
              strategyProperties:
                type: HYPERBOLA
              k: 500

        eventIssue:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.EmptyPipeline

        eventChange:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.ThirdEyeEventsPipeline
            properties:
              strategy: COMPOUND
              k: 500
              eventType: CM

        eventDeployment:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.ThirdEyeEventsPipeline
            properties:
              strategy: COMPOUND
              k: 500
              eventType: INFORMED

        eventAC:
          - outputName: OUTPUT
            inputNames: [ INPUT ]
            className: ai.startree.thirdeye.rootcause.impl.EmptyPipeline

    cache:
      useInMemoryCache: true
      useCentralizedCache: false

      centralizedCacheSettings:
        # TTL (time-to-live) for documents in seconds
        ttl: 3600
        # if inserting data points individually, max number of threads to spawn to parallel insert at a time
        maxParallelInserts: 10
        # which store to use
        cacheDataStoreName: 'couchbase'
        cacheDataSources:
          couchbase:
            className: ai.startree.thirdeye.detection.cache.CouchbaseCacheDAO
            config:
              useCertificateBasedAuthentication: false
              # at least 1 host needed
              hosts:
                - 'host1' # ex. http://localhost:8091
                - 'host2' # ex. http://localhost:8092
                - 'host3' # ex. http://localhost:8093
                - 'host4' # and so on...
              bucketName: 'your_bucket_name'
              # if using certificate-based authentication, authUsername and authPassword values don't matter and won't be used
              authUsername: 'your_bucket_user_username'
              authPassword: 'your_bucket_user_password'
              enableDnsSrv: false
              # certificate based authentication is only available in Couchbase enterprise edition.
              keyStoreFilePath: 'key/store/path/keystore_file' # e.g. '/var/identity.p12'
              # if your keystore has a password, enter it here. by default, Java uses 'work_around_jdk-6879539' to enable empty passwords for certificates.
              keyStorePassword: 'work_around_jdk-6879539'
              trustStoreFilePath: 'trust/store/path/truststore_file' # e.g. '/etc/riddler/cacerts'
              trustStorePassword: ''
          # add your store of choice here
