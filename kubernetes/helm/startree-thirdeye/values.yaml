#
# Copyright 2023 StarTree Inc
#
# Licensed under the StarTree Community License (the "License"); you may not use
# this file except in compliance with the License. You may obtain a copy of the
# License at http://www.startree.ai/legal/startree-community-license
#
# Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT * WARRANTIES OF ANY KIND,
# either express or implied.
# See the License for the specific language governing permissions and limitations under
# the License.
#

# Default values for ThirdEye Deployment

image:
  tag: latest
  pullPolicy: Always
  pullSecretsName: startree

ui:
  image:
    tag: latest
    pullPolicy: Always
    pullSecretsName: startree
  enabled: true
  name: ui
  port: 8081
  publicUrl: http://localhost:8081
  serviceType: LoadBalancer
  resolver: kube-dns.kube-system.svc.cluster.local

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  serviceAnnotations: {}

coordinator:
  enabled: true
  name: coordinator
  replicaCount: 1
  port: 8080
  serviceType: LoadBalancer

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations:
    prometheus.io/path: "/admin/prometheus"
  serviceAnnotations: {}
  javaOpts: -Xmx1G -XX:+UseG1GC
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1

scheduler:
  enabled: true
  name: scheduler
  port: 8080
  serviceType: ClusterIP

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  javaOpts: -Xmx1G -XX:+UseG1GC
  podAnnotations:
    prometheus.io/path: "/admin/prometheus"
  serviceAnnotations: {}
  strategy:
    type: Recreate

worker:
  enabled: true
  name: worker
  port: 8080
  serviceType: ClusterIP

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  replicas: 1
  podAnnotations:
    prometheus.io/path: "/admin/prometheus"
  serviceAnnotations: {}
  javaOpts: -Xmx1G -XX:+UseG1GC
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  config:
    randomWorkerIdEnabled: false

persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 4G
  storageClass: ""

smtp:
  host: localhost
  port: 65

tls:
  enabled: false
  password: changeit
  type: PKCS12
  port: 8443
  ui: {}
  # Uncomment the below config to override the default ui tls secret name ({ui full name}-tls)
  #  secretName: tls-secret-name
  coordinator: {}
  # Uncomment the below config to override the default coordinator tls secret name ({coordinator full name}-internal-tls)
  #  secretName: tls-secret-name
  worker:
    enabled: false
  # Uncomment the below config to override the default worker tls secret name ({worker full name}-internal-tls)
  #  secretName: tls-secret-name
  scheduler:
    enabled: false
  # Uncomment the below config to override the default scheduler tls secret name ({scheduler full name}-internal-tls)
  #  secretName: tls-secret-name

# Expose prometheus metrics.
prometheus:
  enabled: false

time:
  timezone: UTC
  # JAN_1_2000_UTC
  minimumOnboardingStartTime: 946684800000

rca:
  topContributors:
    algorithm: simple
    params: {}

auth:
  enabled: false
  basic:
    enabled: false
#    users:
#      - username: admin
#        password: admin
  oauth:
#    serverUrl: <dex server url>
#    keysUrl: <keys url>
    required:
     - sub
     - exp
#    exactMatch:
#      iss: <issuer url>
#    cache:
#      size: 64
#      ttl: 60000

# Do not remove me.
config:
  description: placeholder for common configs accross coordinator and worker
  jdbcParameters: allowPublicKeyRetrieval=true&sslMode=DISABLED

# Section for dynamic secret generation
secrets:
  smtpUsername:
    env: SMTP_USER
    value: tobefedexternally
  smtpPassword:
    env: SMTP_PASSWORD
    value: tobefedexternally
#  mysqlBackupAwsKeyId:
#    env: AWS_ACCESS_KEY_ID
#    value: <access key id>
#  mysqlBackupAwsAccessKey:
#    env: AWS_SECRET_ACCESS_KEY
#    value: <access key>

# Optional: Enable for ingress
traefik:
  coordinator:
    enabled: false
  enabled: false

# Persistence layer configuration
mysql:
  # Use the MySQL chart dependency
  # Set to false if bringing your own MySQL
  enabled: true
  mysqlUrl: ""

  imageTag: 8.0.28
  mysqlRootPassword: password
  mysqlUser: uthirdeye
  mysqlPassword: pass
  mysqlDatabase: thirdeye
  backup:
    enabled: false
    name: backup-folder-name
    schedule: "0 2 * * *"
#    Make sure you uncomment "mysqlBackupAwsKeyId" and "mysqlBackupAwsAccessKey" in the "secrets" section above when using s3 as backup location
#    s3:
#      bucket: thirdeye-backup
#      region: us-west-2

dataloader:
  enabled: false
#  pinot:
#    controllerProtocol: http
#    controllerHost: pinot-pinot-controller-headless
#    controllerPort: 9000
#    commandOptions: "-authToken 'Basic <auth token>'"

#  # pass the array of base directories of the sample datasets that needs to be ingested to pinot
#  # the sample dataset base directory must follow the below structure
#  #  <sample_dataset_name>
#  #    |-rawdata
#  #    |   |-data.csv
#  #    |-scheme.json
#  #    |-table_config.json
#  #    |-ingestion_job_spec.yaml
#  sampleDatasets:
#    - https://raw.githubusercontent.com/startreedata/thirdeye/master/examples/order_events
