/*
 * Copyright (c) 2022 StarTree Inc. All rights reserved.
 * Confidential and Proprietary Information of StarTree Inc.
 */

package ai.startree.thirdeye.rootcause;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Container object for framework execution results. Holds the results aggregated across all
 * pipeline executions as well as the results for each individual pipeline (keyed by pipeline name).
 */
public final class RCAFrameworkExecutionResult {

  private final Set<Entity> results;
  private final Map<String, PipelineResult> pipelineResults;

  public RCAFrameworkExecutionResult(Set<? extends Entity> results,
      Map<String, PipelineResult> pipelineResults) {
    this.results = new HashSet<>(results);
    this.pipelineResults = pipelineResults;
  }

  /**
   * Returns the flattened results of a framework execution (i.e. the results of the
   * {@code RCAFramework.OUTPUT} pipeline).
   *
   * @return flattened framework execution results
   */
  public Set<Entity> getResults() {
    return results;
  }

  /**
   * Returns the flattened results of a framework execution (i.e. the results of the
   * {@code RCAFramework.OUTPUT} pipeline) in order of descending score.
   *
   * @return sorted flattened framework execution results
   */
  public List<Entity> getResultsSorted() {
    List<Entity> entities = new ArrayList<>(this.results);
    Collections.sort(entities, Entity.HIGHEST_SCORE_FIRST);
    return entities;
  }

  /**
   * Returns a map of sets of results as generated by each individual pipeline during execution.
   * The map is keyed by pipeline name.
   *
   * @return map of pipeline results keyed by pipeline name
   */
  public Map<String, PipelineResult> getPipelineResults() {
    return pipelineResults;
  }
}
