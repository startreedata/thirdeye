{
  "name": "startree-percentage-rule",
  "description": "Detect an anomaly if the percentage difference between the metric and the baseline is greater than the threshold. The baseline is a previous value, set with the `baselineOffset` property. The threshold is set with the `percentageChange` property. Aggregation function with 1 operand: SUM, MAX,etc...",
  "nodes": [
    {
      "name": "root",
      "type": "PostProcessor",
      "params": {
        "type": "ANOMALY_MERGER",
        "component.mergeMaxGap": "${mergeMaxGap}",
        "component.mergeMaxDuration": "${mergeMaxDuration}",
        "component.reNotifyPercentageThreshold": "${replayReNotifyPercentageThreshold}",
        "component.reNotifyAbsoluteThreshold": "${replayReNotifyAbsoluteThreshold}"
      },
      "inputs": [
        {
          "sourcePlanNode": "eventProcessor"
        }
      ]
    },
    {
      "name": "eventProcessor",
      "type": "PostProcessor",
      "params": {
        "type": "EVENTS",
        "component.ignore": "true",
        "component.beforeEventMargin": "${eventFilterBeforeEventMargin}",
        "component.afterEventMargin": "${eventFilterAfterEventMargin}"
      },
      "inputs": [
        {
          "sourcePlanNode": "thresholdProcessor"
        },
        {
          "targetProperty": "current_events",
          "sourcePlanNode": "eventsDataFetcher",
          "sourceProperty": "events"
        }
      ],
      "outputs": []
    },
    {
      "name": "thresholdProcessor",
      "type": "PostProcessor",
      "params": {
        "type": "THRESHOLD",
        "component.ignore": "true",
        "component.min": "${thresholdFilterMin}",
        "component.max": "${thresholdFilterMax}"
      },
      "inputs": [
        {
          "sourcePlanNode": "timeOfWeekProcessor"
        }
      ],
      "outputs": []
    },
    {
      "name": "timeOfWeekProcessor",
      "type": "PostProcessor",
      "params": {
        "type": "TIME_OF_WEEK",
        "component.ignore": "true",
        "component.daysOfWeek": "${daysOfWeek}",
        "component.hoursOfDay": "${hoursOfDay}",
        "component.dayHoursOfWeek": "${dayHoursOfWeek}"
      },
      "inputs": [
        {
          "sourcePlanNode": "coldStartProcessor"
        }
      ],
      "outputs": []
    },
    {
      "name": "coldStartProcessor",
      "type": "PostProcessor",
      "params": {
        "type": "COLD_START",
        "component.ignore": "true",
        "component.tableName": "${dataset}",
        "component.coldStartPeriod": "${baselineOffset}"
      },
      "inputs": [
        {
          "sourcePlanNode": "anomalyDetector"
        }
      ],
      "outputs": []
    },
    {
      "name": "anomalyDetector",
      "type": "AnomalyDetector",
      "params": {
        "component.percentageChange": "${percentageChange}",
        "component.monitoringGranularity": "${monitoringGranularity}",
        "component.metric": "met",
        "component.timestamp": "ts",
        "anomaly.metric": "${aggregationColumn}",
        "anomaly.dataset": "${dataset}",
        "anomaly.source": "percentage-change-template/root",
        "type": "PERCENTAGE_CHANGE",
        "component.pattern": "${pattern}"
      },
      "inputs": [
        {
          "targetProperty": "baseline",
          "sourcePlanNode": "baselineMissingDataManager",
          "sourceProperty": "baselineOutput"
        },
        {
          "targetProperty": "current",
          "sourcePlanNode": "currentMissingDataManager",
          "sourceProperty": "currentOutput"
        }
      ],
      "outputs": []
    },
    {
      "name": "baselineMissingDataManager",
      "type": "TimeIndexFiller",
      "params": {
        "component.timestamp": "ts"
      },
      "inputs": [
        {
          "sourcePlanNode": "baselineDataFetcher",
          "sourceProperty": "baselineOutput"
        }
      ],
      "outputs": [
        {
          "outputName": "baselineOutput"
        }
      ]
    },
    {
      "name": "baselineDataFetcher",
      "type": "DataFetcher",
      "params": {
        "component.dataSource": "${dataSource}",
        "component.tableName": "${dataset}",
        "component.query": "SELECT __timeGroup(\"${timeColumn}\", '${timeColumnFormat}', '${monitoringGranularity}') as ts, ${aggregationFunction}(${aggregationColumn}) as met FROM ${dataset} WHERE __timeFilter(\"${timeColumn}\", '${timeColumnFormat}', '${baselineOffset}', '${baselineOffset}') ${queryFilters} GROUP BY ts ORDER BY ts LIMIT ${queryLimit}"
      },
      "inputs": [],
      "outputs": [
        {
          "outputKey": "pinot",
          "outputName": "baselineOutput"
        }
      ]
    },
    {
      "name": "eventsDataFetcher",
      "type": "EventFetcher",
      "params": {
        "component.sqlFilter": "${eventFilterSqlFilter}",
        "component.eventTypes": "${eventFilterTypes}",
        "component.lookaround": "${eventFilterLookaround}"
      },
      "outputs": [
        {
          "outputKey": "events",
          "outputName": "events"
        }
      ]
    },
    {
      "name": "currentMissingDataManager",
      "type": "TimeIndexFiller",
      "params": {
        "component.timestamp": "ts"
      },
      "inputs": [
        {
          "sourcePlanNode": "currentDataFetcher",
          "sourceProperty": "currentOutput"
        }
      ],
      "outputs": [
        {
          "outputName": "currentOutput"
        }
      ]
    },
    {
      "name": "currentDataFetcher",
      "type": "DataFetcher",
      "params": {
        "component.dataSource": "${dataSource}",
        "component.tableName": "${dataset}",
        "component.query": "SELECT __timeGroup(\"${timeColumn}\", '${timeColumnFormat}', '${monitoringGranularity}') as ts, ${aggregationFunction}(${aggregationColumn}) as met FROM ${dataset} WHERE __timeFilter(\"${timeColumn}\", '${timeColumnFormat}') ${queryFilters} GROUP BY ts ORDER BY ts LIMIT ${queryLimit}"
      },
      "inputs": [],
      "outputs": [
        {
          "outputKey": "pinot",
          "outputName": "currentOutput"
        }
      ]
    }
  ],
  "metadata": {
    "datasource": {
      "name": "${dataSource}"
    },
    "dataset": {
      "name": "${dataset}",
      "dimensions": "${rcaIncludedDimensions}",
      "rcaExcludedDimensions": "${rcaExcludedDimensions}",
      "mutabilityPeriod": "${mutabilityPeriod}",
      "completenessDelay": "${completenessDelay}"
    },
    "metric": {
      "name": "${aggregationColumn}",
      "aggregationFunction": "${rcaAggregationFunction}",
      "where": "${queryFilters}"
    },
    "eventContext": {
      "types": "${rcaEventTypes}",
      "sqlFilter": "${rcaEventSqlFilter}"
    },
    "timezone": "${timezone}",
    "granularity": "${monitoringGranularity}"
  },
  "properties": [
    {
      "name":  "aggregationColumn"
    },
    {
      "name":  "aggregationFunction"
    },
    {
      "name":  "baselineOffset",
      "description": "Offset in ISO-8601 format. Example: `P7D` means \"use the value of the last week as a baseline\".",
      "step": "DETECTION",
      "jsonType": "STRING"
    },
    {
      "name":  "dataSource"
    },
    {
      "name":  "dataset"
    },
    {
      "name":  "monitoringGranularity"
    },
    {
      "name":  "percentageChange",
      "description": "Percentage threshold. If the percentage change is above this threshold, detect an anomaly.\nIn ratio. Eg 0.1 means 10 percent. [Learn more](https://dev.startree.ai/docs/startree-enterprise-edition/startree-thirdeye/reference/operators/anomaly-detector/percentage).",
      "min": 0,
      "step": "DETECTION",
      "jsonType": "NUMBER"
    },
    {
      "name": "timezone",
      "defaultValue": "UTC"
    },
    {
      "name": "timeColumn",
      "defaultValue": "AUTO"
    },
    {
      "name": "timeColumnFormat",
      "defaultValue": ""
    },
    {
      "name": "pattern",
      "defaultValue": "UP_OR_DOWN"
    },
    {
      "name": "completenessDelay",
      "defaultValue": "P0D"
    },
    {
      "name": "mutabilityPeriod",
      "defaultValue": "P0D"
    },
    {
      "name": "mergeMaxGap",
      "defaultValue": ""
    },
    {
      "name": "mergeMaxDuration",
      "defaultValue": ""
    },
    {
      "name": "rcaAggregationFunction",
      "defaultValue": ""
    },
    {
      "name": "queryFilters",
      "defaultValue": ""
    },
    {
      "name": "rcaIncludedDimensions",
      "defaultValue": []
    },
    {
      "name": "rcaExcludedDimensions",
      "defaultValue": []
    },
    {
      "name": "rcaEventTypes",
      "defaultValue": []
    },
    {
      "name": "rcaEventSqlFilter",
      "defaultValue": ""
    },
    {
      "name": "daysOfWeek",
      "defaultValue": []
    },
    {
      "name": "hoursOfDay",
      "defaultValue": []
    },
    {
      "name": "dayHoursOfWeek",
      "defaultValue": {}
    },
    {
      "name": "thresholdFilterMin",
      "defaultValue": "-1"
    },
    {
      "name": "thresholdFilterMax",
      "defaultValue": "-1"
    },
    {
      "name": "eventFilterSqlFilter",
      "defaultValue": ""
    },
    {
      "name": "eventFilterLookaround",
      "defaultValue": "P2D"
    },
    {
      "name": "eventFilterTypes",
      "defaultValue": [
        "__NO_EVENTS"
      ]
    },
    {
      "name": "eventFilterBeforeEventMargin",
      "defaultValue": "P0D"
    },
    {
      "name": "eventFilterAfterEventMargin",
      "defaultValue": "P0D"
    },
    {
      "name": "queryLimit",
      "defaultValue": "100000000"
    },
    {
      "name": "replayReNotifyPercentageThreshold",
      "defaultValue": -1
    },
    {
      "name": "replayReNotifyAbsoluteThreshold",
      "defaultValue": -1
    }
  ]
}
