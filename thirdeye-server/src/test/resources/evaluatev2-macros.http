### Threshold Alert
POST http://localhost:8080/api/alerts/evaluate
accept: application/json
Content-Type: application/json

{
  "alert": {
    "name": "sample-alert",
    "description": "Sample description payload for testing",
    "cron": "0 0/1 * 1/1 * ? *",
    "template": {
      "nodes": [
        {
          "name": "root",
          "type": "AnomalyDetector",
          "params": {
            "type": "THRESHOLD",
            "component.timezone": "US/Pacific",
            "component.monitoringGranularity": "1_DAYS",
            "component.timestamp": "ts",
            "component.metric": "met",
            "component.dimensions": [],
            "component.max": "${max}",
            "component.min": "${min}",
            "component.offset": "mo1m",
            "component.pattern": "down",
            "anomaly.metric": "${metric}"
          },
          "inputs": [
            {
              "targetProperty": "current",
              "sourcePlanNode": "currentDataFetcher",
              "sourceProperty": "currentOutput"
            }
          ],
          "outputs": []
        },
        {
          "name": "currentDataFetcher",
          "type": "DataFetcher",
          "params": {
            "component.dataSource": "${dataSource}",
            "component.query": "SELECT __timeGroup(\"${timeColumn}\", ${javaSimpleDateTimeColumnFormat}, ${javaMonitoringGranularity}) as ts, ${metric} as met FROM ${dataset} WHERE __timeFilter(ts) GROUP BY ts ORDER BY ts LIMIT 1000"
          },
          "inputs": [],
          "outputs": [
            {
              "outputKey": "pinot",
              "outputName": "currentOutput"
            }
          ]
        }
      ]
    },
    "templateProperties": {
      "dataSource": "pinotQuickStartLocal",
      "dataset": "pageviews",
      "metric": "sum(views)",
      "monitoringGranularity": "1:DAYS",
      "timeColumn": "date",
      "timeColumnFormat": "1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd",
      "max": "650000",
      "min": "300000",
      "javaMonitoringGranularity": "P1D",
      "javaSimpleDateTimeColumnFormat": "yyyyMMdd"
    }
  },
  "start": "1577865600000",
  "end": "1590994800000"
}


### Holt Winters
POST http://localhost:8080/api/alerts/evaluate
accept: application/json
Content-Type: application/json

{
  "alert": {
    "name": "sample-alert",
    "description": "Sample description payload for testing",
    "cron": "0 0/1 * 1/1 * ? *",
    "template": {
      "nodes": [
        {
          "name": "root",
          "type": "AnomalyDetector",
          "params": {
            "type": "HOLT_WINTERS",
            "component.timezone": "US/Pacific",
            "component.monitoringGranularity": "1_DAYS",
            "component.timestamp": "ts",
            "component.metric": "met",
            "component.dimensions": [],
            "component.pattern": "${pattern}",
            "component.sensitivity": "${sensitivity}",
            "anomaly.metric": "${metric}"
          },
          "inputs": [
            {
              "targetProperty": "current",
              "sourcePlanNode": "currentDataFetcher",
              "sourceProperty": "currentOutput"
            }
          ],
          "outputs": []
        },
        {
          "name": "currentDataFetcher",
          "type": "DataFetcher",
          "params": {
            "component.dataSource": "${dataSource}",
            "component.query": "SELECT __timeGroup(\"${timeColumn}\", ${javaSimpleDateTimeColumnFormat}, ${javaMonitoringGranularity}) as ts, ${metric} as met FROM ${dataset} WHERE __timeFilter(ts, ${javaLookbackFromStart}) GROUP BY ts ORDER BY ts LIMIT 1000"
          },
          "inputs": [],
          "outputs": [
            {
              "outputKey": "pinot",
              "outputName": "currentOutput"
            }
          ]
        }
      ]
    },
    "templateProperties": {
      "dataSource": "pinotQuickStartLocal",
      "dataset": "pageviews",
      "metric": "sum(views)",
      "monitoringGranularity": "1:DAYS",
      "timeColumn": "date",
      "timeColumnFormat": "1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd",
      "lookback": "7",
      "pattern": "DOWN",
      "sensitivity": "1",
      "javaMonitoringGranularity": "P1D",
      "javaSimpleDateTimeColumnFormat": "yyyyMMdd",
      "javaLookbackFromStart": "P7D"
    }
  },
  "start": "1613376000000",
  "end": "1627714800000"
}
### percentage change
POST http://localhost:8080/api/alerts/evaluate
accept: application/json
Content-Type: application/json

{
  "dryRun": false,
  "alert": {
    "name": "sample-alert",
    "description": "Sample description payload for testing",
    "cron": "0 0/1 * 1/1 * ? *",
    "template": {
      "nodes": [
        {
          "name": "root",
          "type": "AnomalyDetector",
          "params": {
            "type": "PERCENTAGE_CHANGE",
            "component.timezone": "US/Pacific",
            "component.monitoringGranularity": "1_DAYS",
            "component.timestamp": "ts",
            "component.metric": "met",
            "component.dimensions": [],
            "component.percentageChange": "${percentageChange}",
            "component.offset": "${offset}",
            "component.pattern": "${pattern}",
            "anomaly.metric": "${metric}"
          },
          "inputs": [
            {
              "targetProperty": "baseline",
              "sourcePlanNode": "baselineDataFetcher",
              "sourceProperty": "baselineOutput"
            },
            {
              "targetProperty": "current",
              "sourcePlanNode": "currentDataFetcher",
              "sourceProperty": "currentOutput"
            }
          ],
          "outputs": []
        },
        {
          "name": "baselineDataFetcher",
          "type": "DataFetcher",
          "params": {
            "component.dataSource": "${dataSource}",
            "component.query": "SELECT DATETIMECONVERT(\"${timeColumn}\", '${timeColumnFormat}', '1:MILLISECONDS:EPOCH', '${monitoringGranularity}') as ts, ${metric} as met FROM ${dataset} WHERE ts >= ADD(${startTime}, MULT(-${offsetDays}, 24, 60, 60, 1000)) AND ts < ADD(${endTime}, MULT(-${offsetDays}, 24, 60, 60, 1000)) GROUP BY ts ORDER BY ts LIMIT 1000"
          },
          "inputs": [],
          "outputs": [
            {
              "outputKey": "pinot",
              "outputName": "baselineOutput"
            }
          ]
        },
        {
          "name": "currentDataFetcher",
          "type": "DataFetcher",
          "params": {
            "component.dataSource": "${dataSource}",
            "component.query": "SELECT DATETIMECONVERT(\"${timeColumn}\", '${timeColumnFormat}', '1:MILLISECONDS:EPOCH', '${monitoringGranularity}') as ts, ${metric} as met FROM ${dataset} WHERE ts >= ${startTime} AND ts < ${endTime} GROUP BY ts ORDER BY ts LIMIT 1000"
          },
          "inputs": [],
          "outputs": [
            {
              "outputKey": "pinot",
              "outputName": "currentOutput"
            }
          ]
        }
      ]
    },
    "templateProperties": {
      "dataSource": "pinotQuickStartLocal",
      "dataset": "pageviews",
      "metric": "sum(views)",
      "monitoringGranularity": "1:DAYS",
      "timeColumn": "date",
      "timeColumnFormat": "1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd",
      "percentageChange": "0.01",
      "offset": "wo1w",
      "offsetDays": "7",
      "pattern": "down"
    }
  },
  "start": "1614556800000",
  "end": "1616198400000"
}

### percentage change with macros
POST http://localhost:8080/api/alerts/evaluate
accept: application/json
Content-Type: application/json

{
  "dryRun": false,
  "alert": {
    "name": "sample-alert",
    "description": "Sample description payload for testing",
    "cron": "0 0/1 * 1/1 * ? *",
    "template": {
      "nodes": [
        {
          "name": "root",
          "type": "AnomalyDetector",
          "params": {
            "type": "PERCENTAGE_CHANGE",
            "component.timezone": "US/Pacific",
            "component.monitoringGranularity": "1_DAYS",
            "component.timestamp": "ts",
            "component.metric": "met",
            "component.dimensions": [],
            "component.percentageChange": "${percentageChange}",
            "component.offset": "${offset}",
            "component.pattern": "${pattern}",
            "anomaly.metric": "${metric}"
          },
          "inputs": [
            {
              "targetProperty": "baseline",
              "sourcePlanNode": "baselineDataFetcher",
              "sourceProperty": "baselineOutput"
            },
            {
              "targetProperty": "current",
              "sourcePlanNode": "currentDataFetcher",
              "sourceProperty": "currentOutput"
            }
          ],
          "outputs": []
        },
        {
          "name": "baselineDataFetcher",
          "type": "DataFetcher",
          "params": {
            "component.dataSource": "${dataSource}",
            "component.query": "SELECT __timeGroup(\"${timeColumn}\", ${javaSimpleDateTimeColumnFormat}, ${javaMonitoringGranularity}) as ts, ${metric} as met FROM ${dataset} WHERE __timeFilter(ts, ${offsetJava}, ${offsetJava}) GROUP BY ts ORDER BY ts LIMIT 1000"
          },
          "inputs": [],
          "outputs": [
            {
              "outputKey": "pinot",
              "outputName": "baselineOutput"
            }
          ]
        },
        {
          "name": "currentDataFetcher",
          "type": "DataFetcher",
          "params": {
            "component.dataSource": "${dataSource}",
            "component.query": "SELECT __timeGroup(\"${timeColumn}\", ${javaSimpleDateTimeColumnFormat}, ${javaMonitoringGranularity}) as ts, ${metric} as met FROM ${dataset} WHERE __timeFilter(ts) GROUP BY ts ORDER BY ts LIMIT 1000"
          },
          "inputs": [],
          "outputs": [
            {
              "outputKey": "pinot",
              "outputName": "currentOutput"
            }
          ]
        }
      ]
    },
    "templateProperties": {
      "dataSource": "pinotQuickStartLocal",
      "dataset": "pageviews",
      "metric": "sum(views)",
      "monitoringGranularity": "1:DAYS",
      "timeColumn": "date",
      "timeColumnFormat": "1:DAYS:SIMPLE_DATE_FORMAT:yyyyMMdd",
      "percentageChange": "0.01",
      "offset": "wo1w",
      "offsetDays": "7",
      "pattern": "down",
      "offsetJava": "P7D",
      "javaMonitoringGranularity": "P1D",
      "javaSimpleDateTimeColumnFormat": "yyyyMMdd"
    }
  },
  "start": "1614556800000",
  "end": "1616198400000"
}